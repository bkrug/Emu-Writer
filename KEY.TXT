       DEF  RUNTST,OLDTST
*
       REF  VSBW,KSCAN,VMBW

* Keyboard device to be checked
KEYDVC EQU  >8374
* Key pressed
KEYPRS EQU  >8375
* Key status
KEYSTS EQU  >837C
* Address defining address of user-
* defined service routine
USRISR EQU  >83C4

* Time remaining before character repeat
TIMER  DATA 0
* The delay before initial repeat
WAIT1  DATA >18
* The delay before additional repeats
WAIT2  DATA >4

BUFLOC DATA KEYBUF
PREVKY BYTE 0
NOKEY  BYTE >FF
KEYBUF BSS  >300
TIMHX  TEXT 'ABCD.ABC'

RUNTST
* Define the interupt routine
       LI   R0,KEYINT
       MOV  R0,@USRISR
* Specify whole keyboard
       CLR  R0
       MOVB R0,@KEYDVC
* Ignore keys pressed before
* running the program
       MOVB @NOKEY,@KEYPRS
*
LOOP   LIMI 2
       LIMI 0
*
       CLR  R0
       LI   R1,KEYBUF
       LI   R2,>2E0
       BLWP @VMBW
*
       MOVB @PREVKY,R0
       LI   R1,TIMHX+4
       BLWP @MAKETX
*
       MOV  @TIMER,R0
       LI   R1,TIMHX
       BLWP @MAKETX
*
       LI   R0,>2E0
       LI   R2,8
       BLWP @VMBW
       JMP  LOOP

* Use an interupt to record key presses
* so that if the computer is working on
* a long process the keys will still be
* recorded.
KEYINT BLWP @KSCAN
       CB   @KEYPRS,@NOKEY
       JNE  KEYDWN
       MOVB @KEYPRS,@PREVKY
KEYEND RT
* A key has been pressed.
KEYDWN CB   @KEYPRS,@PREVKY
       JNE  KEYNEW
       DEC  @TIMER
       JH   KEYEND
* The Key is being repeated
KEYAGN MOV  @WAIT2,@TIMER
       JMP  KEYALL
* The Key is new
KEYNEW MOV  @WAIT1,@TIMER
       MOVB @KEYPRS,@PREVKY
* Happens regardless of repeat-status
KEYALL MOV  @BUFLOC,R0
       MOVB @KEYPRS,*R0+
       MOV  R0,@BUFLOC
       RT

* Make Hexadecimal Text
* ----------------------
* R0: Word to convert
* R1: Address of output text (4 bytes)
MAKETX DATA WORKSP,MAKEP
WORKSP BSS  >20
STACK  BSS  >20
MAKEP  LI   R12,STACK
       MOV  *R13,R0
       MOV  @2(R13),R1
       BL   @MAKEHX
       RTWP
MAKEHX MOV  R11,*R12+
       BL   @MAKEP1
       SWPB R0
       BL   @MAKEP1
       SWPB R0
* return
       DECT R12
       MOV  *R12,R11
       RT
 
MAKEP1 MOV  R11,*R12+
       MOV  R4,*R12+
* High Nibble
       MOVB R0,R4
       SRL  R4,4
       BL   @CONVB
       MOVB R4,*R1
       INC  R1
* Low Nibble
       MOVB R0,R4
       SLA  R4,4
       SRL  R4,4
       BL   @CONVB
       MOVB R4,*R1
       INC  R1
* Return
       DECT R12
       MOV  *R12,R4
       DECT R12
       MOV  *R12,R11
       RT
* Convert Byte to ASCII code
CONVB  CI   R4,>0A00
       JHE  CNVB2
       AI   R4,>3000
       RT
CNVB2  AI   R4,>3700
       RT

       END