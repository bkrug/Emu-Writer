       DEF  UPUPSP,DOWNSP
*
       REF  LINLST
       REF  PARINX,CHRPAX,LININX

UPUPSP MOV  R11,R12
* Let R3 = Address of paragraph
       MOV  @PARINX,R3
       BL   @PARADR
* Let R4 = Wrap list address
* Let R5 = address after wrap list
       BL   @WRPADR
* Let R4 = first element address
       C    *R4+,*R4+
* Let R5 point to previous line break
UPSP5  C    R5,R4
       JEQ  UPSP7
	   DECT R5
       C    *R5,@CHRPAX
	   JH   UPSP5
* Let R6 = length previous line
       MOV  *R5,R6
       C    R5,R4
       JEQ  UPSP6
       DECT R5
	   S    *R5+,R6
* Decrease CHRPAX
UPSP6  S    R6,@CHRPAX
* If new line is shorter cursor's 
* position on the old line,
* move to the left.
       C   @CHRPAX,*R5
       JL  UPSP4
       MOV *R5,@CHRPAX
       DEC @CHRPAX
*
UPSP4  B    *R12
* Move to previous paragraph
UPSP7  DEC  @PARINX
*
       MOV  @PARINX,R3
	   BL   @PARADR
* Let R4 = Wrap list address
* Let R5 = address after wrap list
       BL   @WRPADR
* Is new paragraph is one-line,
* CHRPAX is already correct.
       MOV  *R4,*R4
       JEQ  UPSP8
* Set new cursor position based on last
* wrap list entry
       DECT R5
	   A    *R5,@CHRPAX
*
UPSP8  B    *R12

DOWNSP RT

*
* Get paragraph address from index
*
* Input:
* R3 - paragraph index
* Output:
* R3 - paragraph address
PARADR SLA  R3,1
       A    @LINLST,R3
       C    *R3+,*R3+
       MOV  *R3,R3
       RT

*
* Let R4 = Wrap list address
* Let R5 = address after wrap list
*
WRPADR MOV  R3,R4
	   INCT R4
	   MOV  *R4,R4
* set R5
       MOV  *R4,R5
	   SLA  R5,1
	   A    R4,R5
	   C    *R5+,*R5+
*
       RT

       END