       DEF  RUNTST
       DEF  LINLST,FMTLST,MGNLST
       REF  GETLIN
       REF  MAKETX,PRINTL,OPENF,CLOSEF
       REF  VMBW,VMBR

* Run all tests
RUNTST BLWP @OPENF
       BL   @CHRSET
       BL   @RPLXSP
       BL   @WRTST
       BL   @TSTLP
       BL   @WREND
       BLWP @CLOSEF
LOOP   JMP  LOOP

* We define LINLST,FMTLST,MGNLST here as
* mocks. They would be defined in a 
* source file.

* This paragraph is indented in the
* first line.
LIN1A  BYTE 48
       TEXT 'In physics, mass energy equivalence states '
       TEXT 'that '
LIN1B  BYTE 60
       TEXT 'anything having mass has an equivalent amount '
       TEXT 'of energy and '
LIN1C  BYTE 55
       TEXT 'vice versa, with these fundamental quantities '
       TEXT 'directly '
LIN1D  BYTE 52
       TEXT 'relating to one another by Albert Einstein,s '
       TEXT 'famous '
LIN1E  BYTE 18
       TEXT 'formulafootnote1'
       BYTE 13,10
LIN2   BYTE 13
       TEXT 'E=mc2   H2O'
       BYTE 13,10
* This paragraph has a hanging indent.
* Word "Similiarly" is bold and
* "having" is italic.
* "corresponding" is underlined.
* "c2" is italic with "2" superscript.
LIN3A  BYTE 58
       TEXT 'This formula states that the equivalent '
       TEXT 'energy (E) can be '
LIN3B  BYTE 54
       TEXT 'calculated as the mass (m) multiplied by the '
       TEXT 'speed of '
LIN3C  BYTE 48
       TEXT 'light (c = about 3*108 m/s) squared. '
       TEXT 'Similarly, '
LIN3D  BYTE 55
       TEXT 'anything having energy exhibits a '
       TEXT 'corresponding mass m '
LIN3E  BYTE 52
       TEXT 'given by its energy E divided by the speed '
       TEXT 'of light '
LIN3F  BYTE 13
       TEXT 'squared c2.'
       BYTE 13,10
LIN4   BYTE 2
       BYTE 13,10
LIN5A  BYTE LIN5B-LIN5A-1
       TEXT 'The American Legion was a British provincial '
       TEXT 'militia '
LIN5B  BYTE LIN5C-LIN5B-1
       TEXT 'unit raised for Loyalist service late in the '
       TEXT 'American '
LIN5C  BYTE LIN5D-LIN5C-1
       TEXT 'Revolutionary War by Benedict Arnold, the '
       TEXT 'former Continental '
LIN5D  BYTE LIN5E-LIN5D-1
       TEXT 'Army general who had crossed over from the '
       TEXT 'Patriots to the '
LIN5E  BYTE LIN5F-LIN5E-1
       TEXT 'British. The unit was composed primarily of '
       TEXT 'deserters from '
LIN5F  BYTE LIN6-LIN5F-1
       TEXT 'the Continental Army.'
       BYTE 13,10
LIN6   BYTE LIN7-LIN6-1
       TEXT 'Regiment Formed'
       BYTE 13,10
LIN7   BYTE LIN8-LIN7-1
       TEXT 'Another line of text'
       BYTE 13,10
LIN8   EVEN

LINLST DATA 21
       DATA LIN1A,LIN1B,LIN1C,LIN1D
       DATA LIN1E
       DATA LIN2
       DATA LIN3A,LIN3B,LIN3C,LIN3D
       DATA LIN3E,LIN3F
       DATA LIN4
       DATA LIN5A,LIN5B,LIN5C,LIN5D
       DATA LIN5E,LIN5F
       DATA LIN6
       DATA LIN7
       
* bold, italic, underline, super, sub
FMTLST DATA 17,0
* Superscript
       DATA 4
       BYTE 7,>14
       DATA 4
       BYTE 16,>04
* Superscript
       DATA 5
       BYTE 4,>14
       DATA 5
       BYTE 5,>04
* Subscript
       DATA 5
       BYTE 9,>0C
       DATA 5
       BYTE 10,>04
* Bold
       DATA 8
       BYTE 37,>84
       DATA 8
       BYTE 46,>04
* Italic
       DATA 9
       BYTE 9,>44
       DATA 9
       BYTE 15,>04
* Underline
       DATA 9
       BYTE 34,>24
       DATA 9
       BYTE 47,>04
* Italic, then superscript
       DATA 11
       BYTE 8,>44
       DATA 11
       BYTE 9,>54
       DATA 11
       BYTE 10,>04
* 5 CPI
       DATA 14
       BYTE 6,>07
* 15 CPI
       DATA 15
       BYTE 7,>02
       
MGNLST DATA 6,0,0
* Default is >1414,>2800
*
* Indented half-inch,
* Half-inch left/right margin
       DATA 0,>0A0A,>280A
* End Indented,
* Top+Bottom margin 2.1 in.
       DATA 5,>0A0A,>2A00
* Hanging Indent half-inch
* Justified
       DATA 6,>8A0A,>2AF6
* Indented 7/10 inch
* 1-inch left/right margins
       DATA 12,>9414,>2A0E
* Centered
       DATA 19,>1494,>2A0E
* Non-Justified
       DATA 20,>1414,>2A0E

* Users will see inverse images of
* letters to represent changes in
* formatting.
* >B0   Inverted 0
* >B1   Inverted 1
* >B2   Inverted 2
* >B5   Inverted 5
* >B6   Inverted 6
* >B7   Inverted 7
* >C2   Inverted B
* >C3   Inverted C
* >C9   Inverted I
* >CA   Inverted J
* >CC   Inverted L
* >CD   Inverted M
* >CE   Inverted N
* >D2   Inverted R
* >D5   Inverted U
* >AB   Inverted +
* >AD   Inverted -
* >E2   Inverted b
* >E5   Inverted e

* Expected Display Lines
DSP1A  BYTE >CC,>CD,>D2,>CD
       TEXT '     In physics, mass energy equivalence '
       TEXT 'states that '
CUR1A  TEXT ' X XXXXXX                                    '
       TEXT '            '
DSP1B  TEXT 'anything having mass has an equivalent amount '
       TEXT 'of energy and '
CUR1B  TEXT '                                              '
       TEXT '              '
DSP1C  TEXT 'vice versa, with these fundamental quantities '
       TEXT 'directly '
CUR1C  TEXT '                                              '
       TEXT '         '
DSP1D  TEXT 'relating to one another by Albert Einstein,s '
       TEXT 'famous '
CUR1D  TEXT '                                             '
       TEXT '       '
DSP1E  TEXT 'formula'
       BYTE >AB,>E2
       TEXT 'footnote1'
       BYTE >AB,>E5
       TEXT ' '
CUR1E  TEXT '        X          X '
DSP2   BYTE >C2,>CD
       TEXT 'E=mc'
       BYTE >AB,>E2
       TEXT '2'
       BYTE >AB,>E5
       TEXT '   H'
       BYTE >AD,>E2
       TEXT '2'
       BYTE >AD,>E5
       TEXT 'O '
CUR2   TEXT ' X     X  X     X  X  '
* This paragraph has a hanging indent.
* Word "Similiarly" is bold and
* "having" is italic.
* "corresponding" is underlined.
* "c2" is italic with "2" superscript.
DSP3A  BYTE >CA,>D5
       TEXT 'This formula states that the equivalent '
       TEXT 'energy (E) can be '
CUR3A  TEXT ' X                                      '
       TEXT '                    '
DSP3B  TEXT '     calculated as the mass (m) multiplied by '
       TEXT 'the speed of '
CUR3B  TEXT 'XXXXX                                         '
       TEXT '             '
DSP3C  TEXT '     light (c = about 3*108 m/s) squared. '
       BYTE >C2,>E2
       TEXT 'Similarly'
       BYTE >C2,>E5
       TEXT ', '
CUR3C  TEXT 'XXXXX                                      X'
       TEXT '          X  '
DSP3D  TEXT '     anything '
       BYTE >C9,>E2
       TEXT 'having'
       BYTE >C9,>E5
       TEXT ' energy exhibits a '
       BYTE >D5,>E2
       TEXT 'corresponding'
       BYTE >D5,>E5
       TEXT ' mass m '
CUR3D  TEXT 'XXXXX          X       X                    X'
       TEXT '              X        '
DSP3E  TEXT '     given by its energy E divided by the '
       TEXT 'speed of light '
CUR3E  TEXT 'XXXXX                                     '
       TEXT '               '
DSP3F  TEXT '     squared '
       BYTE >C9,>E2
       TEXT 'c'
       BYTE >AB,>E2
       TEXT '2'
       BYTE >C9,>E5,>AB,>E5
       TEXT '. '
CUR3F  TEXT 'XXXXX         X  X  X X  '
DSP4   BYTE >CC,>CD,>D2,>CD
       TEXT '        '
CUR4   TEXT ' X XXXXXXXX '
DSP5A  TEXT '       The American Legion was a British '
       TEXT 'provincial militia '
CUR5A  TEXT 'XXXXXXX                                  '
       TEXT '                   '
DSP5B  TEXT 'unit r'
       BYTE >C3,>B0,>B5
       TEXT 'aised for Loyalist service late in the '
       TEXT 'American '
CUR5B  TEXT '       XX                               '
       TEXT '                 '
DSP5C  TEXT 'Revolut'
       BYTE >C3,>B1,>B5
       TEXT 'ionary War by Benedict Arnold, the former '
       TEXT 'Continental '
CUR5C  TEXT '        XX                                '
       TEXT '                      '
DSP5D  TEXT 'Army general who had crossed over from the '
       TEXT 'Patriots to the '
CUR5D  TEXT '                                           '
       TEXT '                '
DSP5E  TEXT 'British. The unit was composed primarily of '
       TEXT 'deserters from '
CUR5E  TEXT '                                            '
       TEXT '               '
DSP5F  TEXT 'the Continental Army. '
CUR5F  TEXT '                      '
DSP6   BYTE >C3,>CE
       TEXT '       Regiment Formed '
CUR6   TEXT ' XXXXXXXX                '
DSP7   BYTE >CC,>CA
       TEXT '       Another line of text '
CUR7   TEXT ' XXXXXXXX                     '
DSP8

* Create inverted version of the 
* characters
INVCLR DATA >0101,>0101,>0101,>0101
       DATA >0101,>0101,>0101,>0101
HEX0   DATA >0020,>5255,>5555,>5522
HEXF   DATA >0070,>4744,>6446,>4444
CHRSET
* Set colors
       LI   R0,>390
       LI   R1,INVCLR
       LI   R2,>10
       BLWP @VMBW
* Copy character codes
       LI   R3,>800
       LI   R4,>C00
CHRST1 MOV  R3,R0
       BLWP @VMBR
       MOV  R4,R0
       BLWP @VMBW
       A    R2,R3
       A    R2,R4
       CI   R4,>1000
       JL   CHRST1
* Define >00 and >FF
       LI   R0,>800
       LI   R1,HEX0
       LI   R2,8
       BLWP @VMBW
       LI   R0,>0FF8
       LI   R1,HEXF
       LI   R2,8
       BLWP @VMBW
       RT

* Replace X with >FF and space with >00       
RPLXSP MOV  R11,R12
       LI   R0,CUR1A
       LI   R1,DSP1B-CUR1A
       BL   @RPLX2
       LI   R0,CUR1B
       LI   R1,DSP1C-CUR1B
       BL   @RPLX2
       LI   R0,CUR1C
       LI   R1,DSP1D-CUR1C
       BL   @RPLX2
       LI   R0,CUR1D
       LI   R1,DSP1E-CUR1D
       BL   @RPLX2
       LI   R0,CUR1E
       LI   R1,DSP2-CUR1E
       BL   @RPLX2
       LI   R0,CUR2
       LI   R1,DSP3A-CUR2
       BL   @RPLX2
       LI   R0,CUR3A
       LI   R1,DSP3B-CUR3A
       BL   @RPLX2
       LI   R0,CUR3B
       LI   R1,DSP3C-CUR3B
       BL   @RPLX2
       LI   R0,CUR3C
       LI   R1,DSP3D-CUR3C
       BL   @RPLX2
       LI   R0,CUR3D
       LI   R1,DSP3E-CUR3D
       BL   @RPLX2
       LI   R0,CUR3E
       LI   R1,DSP3F-CUR3E
       BL   @RPLX2
       LI   R0,CUR3F
       LI   R1,DSP4-CUR3F
       BL   @RPLX2
       LI   R0,CUR4
       LI   R1,DSP5A-CUR4
       BL   @RPLX2
       LI   R0,CUR5A
       LI   R1,DSP5B-CUR5A
       BL   @RPLX2
       LI   R0,CUR5B
       LI   R1,DSP5C-CUR5B
       BL   @RPLX2
       LI   R0,CUR5C
       LI   R1,DSP5D-CUR5C
       BL   @RPLX2
       LI   R0,CUR5D
       LI   R1,DSP5E-CUR5D
       BL   @RPLX2
       LI   R0,CUR5E
       LI   R1,DSP5F-CUR5E
       BL   @RPLX2
       LI   R0,CUR5F
       LI   R1,DSP6-CUR5F
       BL   @RPLX2
       LI   R0,CUR6
       LI   R1,DSP7-CUR6
       BL   @RPLX2
       LI   R0,CUR7
       LI   R1,DSP8-CUR7
       BL   @RPLX2
       MOV  R12,R11
       RT
       
BYTEX  TEXT 'X'
BYTESP TEXT ' '
BYTE0  BYTE >00
BYTEFF BYTE >FF
RPLX2  CB   *R0,@BYTEX
       JEQ  RPLX3
       MOVB @BYTE0,*R0+
       JMP  RPLX4
RPLX3  MOVB @BYTEFF,*R0+
RPLX4  DEC  R1
       JNE  RPLX2
       RT

* Write something
WRTST  LI   R0,STARTM
       LI   R1,ENDM-STARTM
       BLWP @PRINTL
       RT
 
* Finished testing
WREND  LI   R0,ENDM
       LI   R1,4
       BLWP @PRINTL
       RT

STARTM TEXT 'Testing'
ENDM   TEXT 'Done'
ENDME  EVEN

* Test LIN1A (at index 0)
* Compare results to DSP1A and CUR1A
TST1A  LI   R0,0
       BLWP @GETLIN
* R0 Contains result string
* R1 Contains cursor string
* R2 Contains length
       LI   R3,DSP1A
       LI   R4,CUR1A
       LI   R5,CUR1A-DSP1A
       LI   R6,MSG1A
       BLWP @MNTEST
       RT
MSG1A  TEXT 'TST1A '

*
* Run each test on each string.
*
TSTLP  CLR  R7
       LI   R8,EXPST1
       LI   R9,EXPST2
       LI   R10,EXPLNG
       LI   R12,TSTNAM
TSTLP1 MOV  R7,R0
       BLWP @GETLIN
* R0 Contains result string
* R1 Contains cursor string
* R2 Contains length
       MOV  *R8,R3
       MOV  *R9,R4
       MOV  *R10,R5
       MOV  R12,R6
       BLWP @MNTEST
       INC  R7
       INCT R8
       INCT R9
       INCT R10
       AI   R12,6
       CI   R8,EXPST2
       JL   TSTLP1
       RT

* Exptected Display strings
EXPST1 DATA DSP1A,DSP1B,DSP1C,DSP1D
       DATA DSP1E,DSP2
       DATA DSP3A,DSP3B,DSP3C,DSP3D
       DATA DSP3E,DSP3F,DSP4
       DATA DSP5A,DSP5B,DSP5C,DSP5D
       DATA DSP5E,DSP5F
       DATA DSP6,DSP7
* Expected Cursor strings
EXPST2 DATA CUR1A,CUR1B,CUR1C,CUR1D
       DATA CUR1E,CUR2
       DATA CUR3A,CUR3B,CUR3C,CUR3D
       DATA CUR3E,CUR3F,CUR4
       DATA CUR5A,CUR5B,CUR5C,CUR5D
       DATA CUR5E,CUR5F
       DATA CUR6,CUR7
* Expected string lengths
EXPLNG DATA CUR1A-DSP1A,CUR1B-DSP1B
       DATA CUR1C-DSP1C,CUR1D-DSP1D
       DATA CUR1E-DSP1E,CUR2-DSP2
       DATA CUR3A-DSP3A,CUR3B-DSP3B
       DATA CUR3C-DSP3C,CUR3D-DSP3D
       DATA CUR3E-DSP3E,CUR3F-DSP3F
       DATA CUR4-DSP4
       DATA CUR5A-DSP5A,CUR5B-DSP5B
       DATA CUR5C-DSP5C,CUR5D-DSP5D
       DATA CUR5E-DSP5E,CUR5F-DSP5F
       DATA CUR6-DSP6,CUR7-DSP7
* Test Names
TSTNAM TEXT 'TST1A TST1B TST1C TST1D '
       TEXT 'TST1E TST2  '
       TEXT 'TST3A TST3B TST3C TST3D '
       TEXT 'TST3E TST3F TST4  '
       TEXT 'TST5A TST5B TST5C TST5D '
       TEXT 'TST5E TST5F '
       TEXT 'TST6  TST7  '

*
* Test results
* Input:
* R0 - Actual generated string
* R1 - Actual generated cursor string
* R2 - Actual length
* R3 - Expected generated string
* R4 - Expected generated cursor string
* R5 - Expected length
* R6 - Address of test name.
MNWS   BSS  >20
MNTEST DATA MNWS,MNTEST+4
       MOV  @4(13),R2
       MOV  @6(13),R3
       MOV  @8(13),R4
       MOV  @10(13),R5
* Compare string length
       C    R2,R5
       JNE  MF1
* Compare display strings
       MOV  R3,R8
       MOV  *R13,R9
       MOV  R5,R10
       BL   @STREQU
       MOV  R8,R8
       JNE  MF2
* Compare cursor strings
       MOV  R4,R8
       MOV  @2(13),R9
       MOV  R5,R10
       BL   @STREQU
       MOV  R8,R8
       JNE  MF3
* Test passed.
       MOV  @12(13),R6
       LI   R2,MPASS
       MOV  R2,R0
MTEST1 MOVB *R6+,*R2+
       CI   R2,MPASS+6
       JL   MTEST1
       LI   R1,MFMSG1-MPASS
       BLWP @PRINTL
       RTWP
* Length failed
MF1    MOV  R5,R0
       LI   R1,MFMSG1+>31
       BLWP @MAKETX
       MOV  R2,R0
       LI   R1,MFMSG2-4
       BLWP @MAKETX
       MOV  @12(13),R0
       LI   R1,6
       BLWP @PRINTL
       LI   R0,MFMSG1
       LI   R1,MFMSG2-MFMSG1
       BLWP @PRINTL
       JMP  MF2A
* Display strings failed.
* SZC command ensures a length
* no greater than >FF.
MF2    MOV  @12(13),R0
       LI   R1,6
       BLWP @PRINTL
       LI   R0,MFMSG2
       LI   R1,MFMSG3-MFMSG2
       BLWP @PRINTL
MF2A   MOV  R3,R0
       MOV  R5,R1
       SZC  @MXLGTH,R1
       BLWP @PRINTL
       MOV  *R13,R0
       MOV  R2,R1
       SZC  @MXLGTH,R1
       BLWP @PRINTL
       RTWP
* Cursor strings failed.
* SZC command ensures a length
* no greater than >FF.
MF3    MOV  @12(13),R0
       LI   R1,6
       BLWP @PRINTL
       LI   R0,MFMSG2
       LI   R1,MFMSG3-MFMSG2
       BLWP @PRINTL
       MOV  R4,R0
       MOV  R5,R1
       SZC  @MXLGTH,R1
       BLWP @PRINTL
       MOV  @2(13),R0
       MOV  R2,R1
       SZC  @MXLGTH,R1
       BLWP @PRINTL
       RTWP
MXLGTH DATA >FF00
MPASS  TEXT '       passed'
MFMSG1 TEXT 'failed:                         '
       TEXT 'Expected Length: ....           '
       TEXT 'Actual Length:   ....'
MFMSG2 TEXT 'failed: Strings do not match.   '
       TEXT 'Expected and Actual:'
MFMSG3 EVEN

* Compare strings
* Input:
* R8 - Expected string
* R9 - Actual string
* R10 - Expected Length
* Output:
* R8 - 0 if match >FFFF if not.
STREQU CB   *R8+,*R9+
       JNE  STREF
       DEC  R10
       JNE  STREQU
* Match
       CLR  R8
       RT
* No Match
STREF  SETO R8
       RT
       END